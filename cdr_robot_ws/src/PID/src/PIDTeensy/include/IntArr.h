// Generated by gencpp from file PID/IntArr.msg
// DO NOT EDIT!


#ifndef PID_MESSAGE_INTARR_H
#define PID_MESSAGE_INTARR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace PID
{
template <class ContainerAllocator>
struct IntArr_
{
  typedef IntArr_<ContainerAllocator> Type;

  IntArr_()
    : ticks(0)
    , cycles(0)  {
    }
  IntArr_(const ContainerAllocator& _alloc)
    : ticks(0)
    , cycles(0)  {
  (void)_alloc;
    }



   typedef int16_t _ticks_type;
  _ticks_type ticks;

   typedef int16_t _cycles_type;
  _cycles_type cycles;





  typedef boost::shared_ptr< ::PID::IntArr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::PID::IntArr_<ContainerAllocator> const> ConstPtr;

}; // struct IntArr_

typedef ::PID::IntArr_<std::allocator<void> > IntArr;

typedef boost::shared_ptr< ::PID::IntArr > IntArrPtr;
typedef boost::shared_ptr< ::PID::IntArr const> IntArrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::PID::IntArr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::PID::IntArr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::PID::IntArr_<ContainerAllocator1> & lhs, const ::PID::IntArr_<ContainerAllocator2> & rhs)
{
  return lhs.ticks == rhs.ticks &&
    lhs.cycles == rhs.cycles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::PID::IntArr_<ContainerAllocator1> & lhs, const ::PID::IntArr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace PID

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::PID::IntArr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::PID::IntArr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::PID::IntArr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::PID::IntArr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::PID::IntArr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::PID::IntArr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::PID::IntArr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5eb3806f964cd135ee7ee4b66ccd08ef";
  }

  static const char* value(const ::PID::IntArr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5eb3806f964cd135ULL;
  static const uint64_t static_value2 = 0xee7ee4b66ccd08efULL;
};

template<class ContainerAllocator>
struct DataType< ::PID::IntArr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PID/IntArr";
  }

  static const char* value(const ::PID::IntArr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::PID::IntArr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 ticks\n"
"int16 cycles\n"
;
  }

  static const char* value(const ::PID::IntArr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::PID::IntArr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ticks);
      stream.next(m.cycles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IntArr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::PID::IntArr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::PID::IntArr_<ContainerAllocator>& v)
  {
    s << indent << "ticks: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ticks);
    s << indent << "cycles: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cycles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PID_MESSAGE_INTARR_H
