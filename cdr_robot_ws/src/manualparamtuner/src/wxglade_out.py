#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.6 on Fri Oct 16 14:15:08 2020
#
import rospy 
from PID.msg import IntArr
from std_msgs.msg import Empty
import wx
import signal
import sys
import numpy as np

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        rvals=np.loadtxt("rpidval.txt")
        lvals=np.loadtxt("lpidval.txt")
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((928, 244))
        self.spin_ctrl_8 = wx.SpinCtrl(self, wx.ID_ANY, str(int(lvals[0])), min=0, max=100)
        self.spin_ctrl_9 = wx.SpinCtrl(self, wx.ID_ANY, str(int(lvals[1])), min=0, max=100)
        self.spin_ctrl_7 = wx.SpinCtrl(self, wx.ID_ANY, str(int(lvals[2])), min=0, max=100)
        self.button_1 = wx.Button(self, wx.ID_ANY, "send l")
        self.spin_ctrl_10 = wx.SpinCtrl(self, wx.ID_ANY, str(int(rvals[0])), min=0, max=100)
        self.spin_ctrl_11 = wx.SpinCtrl(self, wx.ID_ANY, str(int(rvals[1])), min=0, max=100)
        self.spin_ctrl_12 = wx.SpinCtrl(self, wx.ID_ANY, str(int(rvals[2])), min=0, max=100)
        self.button_2 = wx.Button(self, wx.ID_ANY, "send r")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_SPINCTRL, self.lkpspin, self.spin_ctrl_8)
        self.Bind(wx.EVT_TEXT_ENTER, self.lkpenter, self.spin_ctrl_8)
        self.Bind(wx.EVT_SPINCTRL, self.lkispin, self.spin_ctrl_9)
        self.Bind(wx.EVT_TEXT_ENTER, self.lkienter, self.spin_ctrl_9)
        self.Bind(wx.EVT_SPINCTRL, self.lkdspin, self.spin_ctrl_7)
        self.Bind(wx.EVT_TEXT_ENTER, self.lkdenter, self.spin_ctrl_7)
        self.Bind(wx.EVT_BUTTON, self.sendlbutton, self.button_1)
        self.Bind(wx.EVT_SPINCTRL, self.rkpspin, self.spin_ctrl_10)
        self.Bind(wx.EVT_TEXT_ENTER, self.rkpenter, self.spin_ctrl_10)
        self.Bind(wx.EVT_SPINCTRL, self.rkispin, self.spin_ctrl_11)
        self.Bind(wx.EVT_TEXT_ENTER, self.rkienter, self.spin_ctrl_11)
        self.Bind(wx.EVT_SPINCTRL, self.rkdspin, self.spin_ctrl_12)
        self.Bind(wx.EVT_TEXT_ENTER, self.rkdenter, self.spin_ctrl_12)
        self.Bind(wx.EVT_BUTTON, self.sendrbutton, self.button_2)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        label_1 = wx.StaticText(self, wx.ID_ANY, "lkp")
        sizer_8.Add(label_1, 0, wx.EXPAND, 0)
        sizer_8.Add(self.spin_ctrl_8, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.FIXED_MINSIZE, 0)
        sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, "lki")
        sizer_9.Add(label_2, 0, 0, 0)
        sizer_9.Add(self.spin_ctrl_9, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.FIXED_MINSIZE, 0)
        sizer_7.Add(sizer_9, 1, wx.EXPAND, 0)
        label_3 = wx.StaticText(self, wx.ID_ANY, "lkd")
        sizer_10.Add(label_3, 0, 0, 0)
        sizer_10.Add(self.spin_ctrl_7, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.FIXED_MINSIZE, 0)
        sizer_7.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_4.Add(self.button_1, 0, wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 1, 0, 0)
        label_4 = wx.StaticText(self, wx.ID_ANY, "rkp")
        sizer_13.Add(label_4, 0, 0, 0)
        sizer_13.Add(self.spin_ctrl_10, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.FIXED_MINSIZE, 0)
        sizer_12.Add(sizer_13, 1, wx.EXPAND, 0)
        label_5 = wx.StaticText(self, wx.ID_ANY, "rki")
        sizer_14.Add(label_5, 0, 0, 0)
        sizer_14.Add(self.spin_ctrl_11, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.FIXED_MINSIZE, 0)
        sizer_12.Add(sizer_14, 1, wx.EXPAND, 0)
        label_6 = wx.StaticText(self, wx.ID_ANY, "rkd")
        sizer_15.Add(label_6, 0, 0, 0)
        sizer_15.Add(self.spin_ctrl_12, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.FIXED_MINSIZE, 0)
        sizer_12.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_11.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_11.Add(self.button_2, 0, wx.EXPAND, 0)
        sizer_5.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_5, 1, 0, 0)
        self.SetSizer(sizer_3)
        self.Layout()
        # end wxGlade

    def lkpspin(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'lkpspin' not implemented!")
        event.Skip()

    def lkpenter(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'lkpenter' not implemented!")
        event.Skip()

    def lkispin(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'lkispin' not implemented!")
        event.Skip()

    def lkienter(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'lkienter' not implemented!")
        event.Skip()

    def lkdspin(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'lkdspin' not implemented!")
        event.Skip()

    def lkdenter(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'lkdenter' not implemented!")
        event.Skip()

    def sendlbutton(self, event):  # wxGlade: MyFrame.<event_handler>
        newvalues = [0,0,0]
        newvalues[0] = self.spin_ctrl_8.GetValue()
        newvalues[1] = self.spin_ctrl_9.GetValue()
        newvalues[2] = self.spin_ctrl_7.GetValue()
        np.savetxt("lpidval.txt",newvalues)
        print(newvalues)
        rospy.set_param('lpid', newvalues)
        global emptypub
        emptypub.publish(Empty)
        event.Skip()

    def rkpspin(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'rkpspin' not implemented!")
        event.Skip()

    def rkpenter(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'rkpenter' not implemented!")
        event.Skip()

    def rkispin(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'rkispin' not implemented!")
        event.Skip()

    def rkienter(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'rkienter' not implemented!")
        event.Skip()

    def rkdspin(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'rkdspin' not implemented!")
        event.Skip()

    def rkdenter(self, event):  # wxGlade: MyFrame.<event_handler>
        #print("Event handler 'rkdenter' not implemented!")
        event.Skip()

    def sendrbutton(self, event):  # wxGlade: MyFrame.<event_handler>
        newvalues = [0,0,0]
        newvalues[0] = self.spin_ctrl_10.GetValue()
        newvalues[1] = self.spin_ctrl_11.GetValue()
        newvalues[2] = self.spin_ctrl_12.GetValue()
        np.savetxt("rpidval.txt",newvalues)
        print(newvalues)
        rospy.set_param('rpid', newvalues)
        global emptypub
        emptypub.publish(Empty())
        event.Skip()

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp
def signal_handler(signal, frame):
  sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

if __name__ == "__main__":
    rospy.init_node("manualparam")
    global emptypub
    emptypub = rospy.Publisher("/npid",Empty,queue_size=1)
    app = MyApp(0)
    app.MainLoop()
